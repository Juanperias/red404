version: '3.8'

services:
  db:
    image: postgres:16-alpine
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend # Build from backend/Dockerfile
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app # Mount the backend source code for hot reload
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy # Ensure DB is ready before starting backend
    # Use a command that triggers `air` inside the container for hot-reloading
    # We'll run `air` directly on the host for better dev experience,
    # so this 'command' is mostly for potential deployment or basic container build.
    # For dev, we run `air` outside of docker-compose to leverage host file watching.
    # For actual containerized dev, you'd mount and run `air` from the Dockerfile.
    command: sh -c "sleep 5 && air" # Or your main binary after running migrations
    working_dir: /app

  # Frontend dev server run directly on host for better performance/hot reload
  # No dedicated Docker Compose service for 'frontend-dev' as it typically runs on host.
  # However, you might add a 'frontend-build' service for production builds.

volumes:
  db_data:
